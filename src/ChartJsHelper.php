<?php 
namespace YusrilHs\ChartJsHelper;

use Camspiers\JsonPretty\JsonPretty;
use YusrilHs\ChartJsHelper\ChartJsLib;
use InvalidArgumentException;

class ChartJsHelper {

    /**
     * Chart generated
     * @var array
     */
    private static $charts = array();

    /**
     * Allowed ChartType
     * @var array
     */
    private static $allowedChartType = array(
        'bar',
        'doughnut',
        'line',
        'pie',
        'polarArea',
        'radar',
        'bubble',
        'scatter'
    );

    /**
     * Chart Builder
     * @param  string $chartId 
     * @param  string $chartType 
     * @return YusrilHs\ChartJsHelper\ChartJsLib            
     */
    public static function createChart($chartId, $chartType) {
        if (!preg_match('/^[a-zA-Z_]+[0-9a-zA-Z_]*$/', $chartId)) {
            throw new InvalidArgumentException('Chart id must a letter followed by alphanumeric and underscore');
        }

        if (isset(self::$charts[$chartId])) {
            throw new InvalidArgumentException(sprintf('%s is already exists', $chartId));
        }

        if (!in_array($chartType, self::$allowedChartType)) {
            throw new InvalidArgumentException(sprintf('Chart %s is not defined', $chartType));
        }

        self::$charts[$chartId] = new ChartJsLib($chartType);

        return self::$charts[$chartId];
    }

    /**
     * Get chart by id
     * @param  string $chartId 
     * @return YusrilHs\ChartJsHelper\ChartJsLib            
     */
    public static function getChart($chartId) {
        if (!isset(self::$charts[$chartId])) {
            throw new InvalidArgumentException(sprintf('Chart with id %s is not defined', $chartId));
        }

        return self::$charts[$chartId];
    }

    /**
     * Create javascript content with script tag
     * @param  boolean $uglify
     * @return string
     */
    public static function createScriptTag($compress = false) {
        $template = "<script type=\"text/javascript\">\n(function(window) {\n%s}(window));\n</script>";
        return sprintf($template, self::getScript($compress));
    }

    /**
     * Retrieve javascript content
     * @param  boolean $prettify
     * @return string
     */
    public static function getScript($compress = false) {
        $configString = array();
        $elementIdSelector = array();
        $loaderScript = array();
        $loaderScriptTemplate = "\nwindow.onload = function() {\n%s\n};";

        foreach (self::$charts as $key => $chart) {
            if (!$compress) {
                $jsonPrettify = new JsonPretty();
                $config = $jsonPrettify->prettify($chart->getConfig());
            } else {
                $config = json_encode($chart->getConfig());
            }

            array_push($configString, sprintf('var __chart_config_%s = %s;', $key, $config));
            array_push($elementIdSelector, sprintf('var __chart_context_%s = document.getElementById("%s").getContext("2d");', $key, $chart->getElementId()));
            array_push($loaderScript, sprintf('window.__chart_%s = new Chart(__chart_context_%s, __chart_config_%s);', $key, $key, $key));

        }

        $header  = "// Generated by ChartJsPhpHelper\n// https://github.com/yusrilhs/ChartJsPhpHelper\n";

        $script   = implode("\n", $elementIdSelector) . "\n";
        $script  .= implode("\n", $configString) . "\n";
        $script  .= sprintf($loaderScriptTemplate, implode("\n", $loaderScript)) . "\n";
        
        if ($compress) {
            $script = str_replace(array("\n", ' '), '', $script);
        }
        return $header . $script;
    }

    public function flushCharts() {
        self::$charts = array();
    }
}
